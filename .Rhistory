# create table of these three model test errors
error_for_models = tribble(
~Model, ~RMSE,
#------/-------
"Linear", linear_RMSE,
"Ridge", ridge_RMSE,
"Lasso", lasso_RMSE,
)
# print these metrics in nice table
error_for_models %>% kable(format = "latex", row.names = NA,
booktabs = TRUE,
digits = 5,
col.names = c("Model type",
"Root mean squared error")) %>%
kable_styling(position = "center") %>%
kable_styling(latex_options = "HOLD_position")  %>%
save_kable(file =
"~/Desktop/STAT471/unemployment-project/results/RMSE-models.pdf",
self_contained = T)
error_for_models
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lasso_coef)))
coeffs
r_squared_lm
extract_coefs(lasso_fit, unemploy_train)$coefficient
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lasso_coef)))
coeffs
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)   # for printing tables
library(cowplot)      # for side by side plots
library(glmnetUtils)  # for running ridge and lasso
library(ISLR2)        # necessary for College data
library(pROC)         # for ROC curves
library(tidyverse)
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train= unemploy_train %>% select(-c(date, unemployment_rate, percent_dif_unemploy))
unemploy_test = unemploy_test %>% select(-c(date, unemployment_rate, percent_dif_unemploy))
#run linear regression
lm_fit = lm(black_unemployment ~ ., data = unemploy_train)
r_squared_lm = summary(lm_fit)$r.squared
# save the linear regression fit object
save(lm_fit, file = "~/Desktop/STAT471/unemployment-project/results/ridge_fit.Rda")
#run ridge fit
set.seed(3) # set seed before cross-validation for reproducibility
ridge_fit = cv.glmnet(black_unemployment ~ ., alpha = 0, nfolds = 10, data = unemploy_train)
plot(ridge_fit)
#lambda use 1se rule
lambda = ridge_fit$lambda.1se
sprintf("The value of lambda based on the one-standard-error rule: %f",
lambda)
#Visualize the ridge regression fitted coefficients, highlighting 6 features using the `features_to_plot` argument
#Consider: do any features changes signs as lambda increases
plot_glmnet(ridge_fit, unemploy_train, features_to_plot = 6)
#run lasso fit
set.seed(5) # set seed before cross-validation for reproducibility
lasso_fit = cv.glmnet(black_unemployment ~ ., alpha = 1, nfolds = 10, data = unemploy_train)
plot(lasso_fit)
lambda_lasso = lasso_fit$lambda.1se
sprintf("The value of lambda based on the one-standard-error rule: %f",
lambda_lasso)
#How many features are selected if features are chosen according to the 1 se rule?
num_features = lasso_fit$nzero[lasso_fit$lambda == lasso_fit$lambda.1se]
extract_std_coefs(lasso_fit, unemploy_train) %>%
filter(coefficient != 0)
#Need to add more colors
#Use `plot_glmnet` to visualize the lasso fitted coefficients, which by default will highlight the features selected by the lasso
plot_glmnet(lasso_fit, unemploy_train)
# generate predictions if guess mean difference
mean_dif = unemploy_train %>% summarise(mean(black_unemployment)) %>% pull()
mean_predictions = rep(mean_dif, nrow(unemploy_test))
mean_RMSE = sqrt(mean((mean_predictions - unemploy_test$black_unemployment)^2))
# generate linear model predictions and test error
linear_predictions = predict(lm_fit, newdata = unemploy_test)
linear_RMSE = sqrt(mean((linear_predictions - unemploy_test$black_unemployment)^2))
# generate ridge regression model predictions and test error
ridge_predictions = predict(ridge_fit,
newdata = unemploy_test,
s = "lambda.1se")
ridge_RMSE = sqrt(mean((ridge_predictions - unemploy_test$black_unemployment)^2))
# generate lasso regression model predictions and test error
lasso_predictions = predict(lasso_fit,
newdata = unemploy_test,
s = "lambda.1se")
lasso_RMSE = sqrt(mean((lasso_predictions -  unemploy_test$black_unemployment)^2))
# create table of these three model test errors
error_for_models = tribble(
~Model, ~RMSE,
#------/-------
"Linear", linear_RMSE,
"Ridge", ridge_RMSE,
"Lasso", lasso_RMSE,
)
# print these metrics in nice table
error_for_models %>% kable(format = "latex", row.names = NA,
booktabs = TRUE,
digits = 5,
col.names = c("Model type",
"Root mean squared error")) %>%
kable_styling(position = "center") %>%
kable_styling(latex_options = "HOLD_position")  %>%
save_kable(file =
"~/Desktop/STAT471/unemployment-project/results/RMSE-models.pdf",
self_contained = T)
error_for_models
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lasso_coef)))
coeffs
coeffs
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef)))
coeffs
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
coeffs
library(QuantPsyc)
install.packages("QuantPsyc")
library(QuantPsyc)
lm.beta(lm_fit)
ridge_fit
extract_std_coefs(ridge_fit, unemploy_train)$coefficient
extract_std_coefs(lasso_fit, unemploy_train)$coefficient
install.packages("QuantPsyc")
library(QuantPsyc)
lm.beta(lm_fit)
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = extract_std_coefs(ridge_fit, unemploy_train)$coefficient
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
library(QuantPsyc)
lm.beta(lm_fit)
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = extract_std_coefs(ridge_fit, unemploy_train)$coefficient
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
library(QuantPsyc)
lm.beta(lm_fit)
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = extract_std_coefs(ridge_fit, unemploy_train)$coefficient,
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
coeffs
lm.beta(lm_fit)
lm.beta(lm_fit)
extract_std_coefs(ridge_fit, unemploy_train)$coefficient
library(QuantPsyc)
coeffs = tibble(lm_coef = lm.beta(lm_fit),
ridge_coef = extract_std_coefs(ridge_fit, unemploy_train)$coefficient,
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
coeffs
library(QuantPsyc)
coeffs = tibble(lm_coef = lm.beta(lm_fit),
ridge_coef = extract_std_coefs(ridge_fit, unemploy_train)$coefficient,
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
coeffs
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)   # for printing tables
library(cowplot)      # for side by side plots
library(glmnetUtils)  # for running ridge and lasso
library(ISLR2)        # necessary for College data
library(pROC)         # for ROC curves
library(tidyverse)
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train= unemploy_train %>% select(-c(date, black_unemployment, percent_dif_unemploy))
coeffs = tibble(lm_coef = lm.beta(lm_fit), #get standardized lm coefficents
ridge_coef = extract_std_coefs(ridge_fit, unemploy_train)$coefficient,
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
tibble(lm_coef = lm.beta(lm_fit), #get standardized lm coefficents
ridge_coef = extract_std_coefs(ridge_fit, unemploy_train)$coefficient,
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1]))
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)   # for printing tables
library(cowplot)      # for side by side plots
library(glmnetUtils)  # for running ridge and lasso
library(ISLR2)        # necessary for College data
library(pROC)         # for ROC curves
library(tidyverse)
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train= unemploy_train %>% select(-c(date, black_unemployment, percent_dif_unemploy))
lm.beta(lm_fit)
extract_std_coefs(ridge_fit, unemploy_train)$coefficient
extract_std_coefs(ridge_fit, unemploy_train)$coefficient
ridge_fit
extract_std_coefs(ridge_fit, unemploy_train)$coefficient
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)   # for printing tables
library(cowplot)      # for side by side plots
library(glmnetUtils)  # for running ridge and lasso
library(ISLR2)        # necessary for College data
library(pROC)         # for ROC curves
library(tidyverse)
library(QuantPsyc)
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train= unemploy_train %>% select(-c(date, unemployment_rate, percent_dif_unemploy))
coeffs = tibble(lm_coef = lm.beta(lm_fit), #get standardized lm coefficents
ridge_coef = extract_std_coefs(ridge_fit, unemploy_train)$coefficient,
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
?extract_std_coefs
??extract_std_coefs
coefs(lasso_fit, unemploy_train)$coefficient
coeffs = tibble(lm_coef = lm.beta(lm_fit), #get standardized lm coefficents
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
coeffs = tibble(lm_coef = lm.beta(lm_fit), #get standardized lm coefficents
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)   # for printing tables
library(cowplot)      # for side by side plots
library(glmnetUtils)  # for running ridge and lasso
library(ISLR2)        # necessary for College data
library(pROC)         # for ROC curves
library(tidyverse)
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train= unemploy_train %>% select(-c(date, black_unemployment, percent_dif_unemploy))
coeffs = tibble(lm_coef = lm.beta(lm_fit), #get standardized lm coefficents
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
coeffs = tibble(lm_coef = (lm_fit), #get standardized lm coefficents
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
library(QuantPsyc)
coeffs = tibble(lm_coef = lm.beta(lm_fit), #get standardized lm coefficents
ridge_coef = extract_std_coefs(ridge_fit, unemploy_train)$coefficient,
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
lm.beta(lm_fit)
extract_std_coefs(ridge_fit, unemploy_train)$coefficient
library(QuantPsyc)
coeffs = tibble(lm_coef = lm.beta(lm_fit), #get standardized lm coefficents
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
library(QuantPsyc)
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lm_coef+ridge_coef+lasso_coef)))
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lasso_coef)))
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)   # for printing tables
library(cowplot)      # for side by side plots
library(glmnetUtils)  # for running ridge and lasso
library(ISLR2)        # necessary for College data
library(pROC)         # for ROC curves
library(tidyverse)
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train= unemploy_train %>% select(-c(date, black_unemployment, percent_dif_unemploy))
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lasso_coef)))
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)   # for printing tables
library(cowplot)      # for side by side plots
library(glmnetUtils)  # for running ridge and lasso
library(ISLR2)        # necessary for College data
library(pROC)         # for ROC curves
library(tidyverse)
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train= unemploy_train %>% select(-c(date, black_unemployment, unemployment_rate))
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
lasso_coef = extract_std_coefs(lasso_fit, unemploy_train)$coefficient,
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lasso_coef)))
error_for_models
coeffs
coef(lm_fit)[-1]
coef(ridge_fit, s = "lambda.1se")[-1,1]
extract_std_coefs(lasso_fit, unemploy_train)$coefficient
lasso_fit
extract_std_coefs(lasso_fit, unemploy_train)$coefficient
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
features = names(coef(lm_fit)[-1])) %>%
arrange(desc(abs(lasso_coef)))
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
features = names(coef(lm_fit)[-1]))
coeffs
coeffs = tibble(lm_coef = coef(lm_fit)[-1],
ridge_coef = coef(ridge_fit, s = "lambda.1se")[-1,1],
features = names(coef(lm_fit)[-1]))
coeffs
set.seed(1) # for reproducibility (DO NOT CHANGE)
rf_fit = randomForest(black_unemployment ~ ., data = unemploy_train)
library(kableExtra)   # for printing tables
library(cowplot)      # for side by side plots
library(glmnetUtils)  # for running ridge and lasso
library(ISLR2)        # necessary for College data
library(pROC)         # for ROC curves
library(tidyverse)
library(QuantPsyc)
library(rpart)         # to train decision trees
library(rpart.plot)    # to plot decision trees
library(randomForest)  # random forests
library(gbm)           # boosting
set.seed(1) # for reproducibility (DO NOT CHANGE)
rf_fit = randomForest(black_unemployment ~ ., data = unemploy_train)
num_features = ncol(unemploy_train) - 1
mtry = floor(sqrt(num_features))
mtry
set.seed(1) # for reproducibility (DO NOT CHANGE)
rf_fit = randomForest(black_unemployment ~ ., data = unemploy_train)
num_features = ncol(unemploy_train) - 1
mtry = floor(sqrt(num_features))
mtry
mtry_verified = rf_fit$mtry
mtry_verified
options(scipen = 0, digits = 3)  # controls number of significant digits printed
rf_fit$mtry
# plot OOB error as a function of number of trees
tibble(oob_error = rf_fit$err.rate[,"OOB"], trees = 1:500) %>%
ggplot(aes(x = trees, y = oob_error)) + geom_line() +
labs(x = "Number of trees", y = "OOB error") + theme_bw()
rf_fit$err.rate[,"OOB"]
rf_fit
rf_fit = randomForest(black_unemployment ~ ., data = unemploy_train)
rf_fit$err.rate[,"OOB"]
plot(rf_fit)
rf_3 = randomForest(black_unemployment ~ ., mtry = 3, data = unemploy_train)
rf_6 = randomForest(black_unemployment ~ ., mtry = 6, data = unemploy_train)
rf_19 = rrandomForest(black_unemployment ~ ., mtry = 19, data = unemploy_train)
unemploy_train
unemploy_train= unemploy_train %>% select(-c(date, unemployment_rate, percent_dif_unemploy))
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)   # for printing tables
library(cowplot)      # for side by side plots
library(glmnetUtils)  # for running ridge and lasso
library(ISLR2)        # necessary for College data
library(pROC)         # for ROC curves
library(tidyverse)
library(QuantPsyc)
library(rpart)         # to train decision trees
library(rpart.plot)    # to plot decision trees
library(randomForest)  # random forests
library(gbm)           # boosting
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train= unemploy_train %>% select(-c(date, unemployment_rate, percent_dif_unemploy))
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)   # for printing tables
library(cowplot)      # for side by side plots
library(glmnetUtils)  # for running ridge and lasso
library(ISLR2)        # necessary for College data
library(pROC)         # for ROC curves
library(tidyverse)
library(QuantPsyc)
library(rpart)         # to train decision trees
library(rpart.plot)    # to plot decision trees
library(randomForest)  # random forests
library(gbm)           # boosting
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train
unemploy_train= unemploy_train %>% select(-c(date, unemployment_rate, percent_dif_unemploy))
-c(date, unemployment_rate, percent_dif_unemploy)
unemploy_train= unemploy_train %>% select(-c("date", "unemployment_rate", "percent_dif_unemploy"))
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)   # for printing tables
library(cowplot)      # for side by side plots
library(glmnetUtils)  # for running ridge and lasso
library(ISLR2)        # necessary for College data
library(pROC)         # for ROC curves
library(tidyverse)
library(QuantPsyc)
library(rpart)         # to train decision trees
library(rpart.plot)    # to plot decision trees
library(randomForest)  # random forests
library(gbm)           # boosting
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train
unemploy_train %>% select(-c("date", "unemployment_rate", "percent_dif_unemploy"))
unemploy_train %>% select(-c("date", "unemployment_rate", "percent_dif_unemploy"))
unemploy_train %>% select(-c("date", "unemployment_rate", "percent_dif_unemploy"))
unemploy_train
unemploy_train %>% select(-c("date"))
library(dplyr)
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train
unemploy_train %>% select(-c(date, unemployment_rate, percent_dif_unemploy))
unemploy_train= unemploy_train
unemploy_train %>% select(date)
unemploy_train %>% select("date")
unemploy_train %>% select(-date)
rf_fit = randomForest(unemployment_rate ~ ., data = unemploy_train)
plot(rf_fit)
unemploy_train
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = read_tsv(file = "data/clean/econ_train.tsv")
unemploy_test = read_tsv(file = "data/clean/econ_test.tsv")
variable_names = read_tsv(file = "data/clean/var_names.tsv")
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train= unemploy_train %>% select(-c(date, black_unemployment, percent_dif_unemploy))
unemploy_train
type(unemploy_train)
class(unemploy_train)
tibble(unemploy_train)
# load the data
setwd("~/Desktop/STAT471/unemployment-project")
unemploy_train = tibble(read_tsv(file = "data/clean/econ_train.tsv"))
unemploy_test = tibble(read_tsv(file = "data/clean/econ_test.tsv"))
variable_names = tibble(read_tsv(file = "data/clean/var_names.tsv"))
# install.packages("scales")              # dependency of plot_glmnet
source("code/functions/plot_glmnet.R")
unemploy_train = unemploy_train %>% select(-c(date, black_unemployment, percent_dif_unemploy))
